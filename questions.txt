/*
 * Authors: Rizwan Khan, Zhuoran Gu
 * UCSD Email: rikhan@ucsd.edu, zhg050@ucsd.edu
 * PID: A12236946, A53213113
 * CSE Login: cs100sgv, zhg050
 */

Q1. BSTNodeInt.o testBST.o BSTInt.o

Q2. In the file BSTInt.cpp, remove the name scope from the insert 
function. That is, change the function header from

bool BSTInt::insert(int item)

to

bool insert(int item)
  
    Answer
    ------
The errors are:
BSTInt.cpp: In function 'bool insert(int)':
BSTInt.cpp:25:8: error: 'root' was not declared in this scope
   if (!root) {
        ^
BSTInt.cpp:27:7: error: 'isize' was not declared in this scope
     ++isize;
       ^
BSTInt.cpp:31:22: error: 'root' was not declared in this scope
   BSTNodeInt* curr = root;
                      ^
BSTInt.cpp:56:5: error: 'isize' was not declared in this scope
   ++isize;
     ^
make: *** [BSTInt.o] Error 1

The errors means the variable 'root' and 'isize' were not declared in the 
global scope.This is because the 'root' and 'isize' were defined within the 
scope of BSTInt instead of the insert method. We need to use the scope 
resolution operator to include the scopeof what is in BSTInt.


Q3. In a sentence or two, describe the bug in the code. What function was it, 
    and what was it?
    
    Answer
    ------
    The insert function had the bug. The bug was overwritting data in children
    nodes by inserting a node where a child node already existed.

Q4. In about a paragraph, describe the process you used to find and fix the bug. 
    Include any tools you used and how you used them. If you were able to spot 
    the bug by just looking at the code, describe your reasoning process in detail. 
    We're not looking for the corrected code here (we already have that in your 
    .cpp file). Rather we're looking for a description of your debugging process. 
    Please be specific.
    
    Answer
    ------
    We found the bug by making a bunch of test cases and testing each and every
    single test case. We wrote out all the test cases that failed in the
    original code. One test that failed was inserting 1, 3, then 2 and another
    test that was failed was 11, 10, 12, 13, then 14. The program was saying it
    was unable to find the data in the node with the value of 13. After
    analyzing the find method and seeing nothing was wrong, we decided to write
    out what the insert and find code were doing with pen and paper. As we were
    doing the inserts, we noticed that the current node wouldn't point the
    correct node to do the insert. It would overwrite the data of the node
    instead of inserting it as a child node. In order to fix this we went to
    the part of the code where the insert was happening and chose to change how
    the code was traversing through the tree. We decided to make a while loop
    and loop through the tree and find the proper place the node belonged. So
    we chose to make a new node when the node when there was a NULL space for
    a child otherwise we traversed as necessary and inserted when the proper
    space was reached.

Q5: Look at header for the insert method in the BST.hpp and compare it to the 
    header of the insert method in BSTInt.h. For each class state whether the 
    insert method passes its argument by value or by reference. Explain why 
    each method probably uses the method that it uses (i.e. if pass by value, 
    explain why not pass by reference, and if pass by reference, explain why
    not pass by value).

    Answer
    ------
    The insert method in the BSTInt.h is a pass by value because the item that
    is being inserted is the actual value and not a reference to that item. You
    can see it is a pass by value because we are not passing in "&item" which
    would mean we are passing a reference to that item. The BST.hpp file is a
    pass by reference because we are passing a reference of the item and
    because we don't want to change what is being passed in, we pass it as a
    constant data object to the insert function. This makes it so we start in
    the first element and use that to iterate through the tree to elements that
    are being inserted or already inside the tree.

Q6: Which input file produces taller trees (sorted or random)?

    Answer
    ------
    The sorted input file produces the taller tree. The reason being is because
    it is sorted, all the nodes go towards the right side of the tree so it
    ends up looking like a linked list.

Q7: Research on your own the height you would expect for the tree produced by 
    the sorted input and for the tree produced by the random input. Give the 
    approximate height you would expect for each tree based on the size of the 
    tree, N. Then build the tree for different sizes of sorted and randomly 
    ordered input, report your results, and comment on whether what you 
    see matches your expectations. Be sure to cite your source for the 
    heights you expect.

    Answer
    ------
    The height for the sorted tree is one less than the number of actors inside
    the tree. The reason being is because we start counting the height from 0.
    For the sorted tree, the height is 11793. This happens because we are not
    balancing the BST, so we get a long tree that is no different than a linked
    list. For the not sorted tree, the height is 32, so we have the tree having
    actual branches that have left/right children. When we decided to check for
    a sorted BST with the numbers 0 to 9, we got a height of 9 because it was
    a tree that all went one way leaning to the right. When we did the numbers
    randomly we got a height of 4. The reason being is because 4 was the root
    node and it ended up being longer on the right side of the tree.We expected
    a height of 5 because 10 digits were inputted, so We expected half of the
    height. We was making the assumption that the tree would just be half of
    the numbers inputted. We didn't use any resource to make this conclusion

